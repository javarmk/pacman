using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(MeshFilter))]
public class MeshGenerator : MonoBehaviour
{
    Mesh mesh;
    Vector3[] vertices;
    int[] triangles;
    Color[] colors;

    [SerializeField] float widthBox = 0.1f;
    [SerializeField] float heighBox = 0.1f;



    char[][] mapInfo = new char[][]{  // # == wall, * == point , @== bigPoint, S = spawn, M = ghostBox, space == empty   // heigt == 34 width == 29
        new char[]{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','*','*','*','*','*','*','*','*','*','*','*','*','#','*','*','*','*','*','*','*','*','*','*','*','*','*','#' },
        new char[]{'#','@','#','#','#','*','#','#','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','@','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','*','*','*','*','*','*','*','*','*','*','*','*','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','*','*','*','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','#','#','#',' ',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','M','M','M','M','M','M','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','M','M','M','M','M','M','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{' ',' ',' ',' ',' ','*',' ',' ','#','M','M','M','M','M','M','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','M','M','M','M','M','M','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','*','*','*','*','*','*','*','*','*','*','*','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','@','*','*','*','*','#','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','*','#','*','*','*','*','*','*','*','*','*','S','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','*','#','*','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','*','*','#','*','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','*','*','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','*','*','*','*','*','*','*','*','*','*','*','*','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
    };


    private void Awake()
    {
    }

    private void Start()
    {
        mesh = new Mesh();
        GetComponent<MeshFilter>().mesh = mesh;
        // InitialMesh();

        InitialVertices();

        triangles = new int[]{
            0,30,1,
            30,31,1,
        };

        colors = new Color[vertices.Length];
        colors[0] = Color.blue;
        colors[30] = Color.red;
        colors[1] = Color.green;


        ApplyMesh();
    }

    private void InitialMesh()
    {

        InitialVertices();
        InitialTriangles();


        SetMeshColor();


        ApplyMesh();
    }


    private void InitialVertices()
    {
        vertices = new Vector3[(mapInfo[0].Length + 1) * (mapInfo.Length + 1)];
        int t = 0;
        for (int x = 0; x < mapInfo.Length + 1; x++)
        {
            for (int y = 0; y < mapInfo[0].Length + 1; y++)
            {
                vertices[t] = new Vector3(y * widthBox, 0, x * heighBox);
                t++;
            }
        }
    }

    private void InitialTriangles()
    {
        triangles = new int[2 * (mapInfo.Length) * (mapInfo[0].Length) * 3];
        int count = 0;
        for (int x = 0; x < mapInfo.Length; x++)
        {
            for (int y = 0; y < mapInfo[0].Length; y++)
            {
                triangles[count] = x * (mapInfo[0].Length + 1) + y;
                count++;
                triangles[count] = (x + 1) * (mapInfo[0].Length + 1) + y;
                count++;
                triangles[count] = x * (mapInfo[0].Length + 1) + y + 1;
                count++;


                triangles[count] = (x + 1) * (mapInfo[0].Length + 1) + y;
                count++;
                triangles[count] = (x + 1) * (mapInfo[0].Length + 1) + y + 1;
                count++;
                triangles[count] = x * (mapInfo[0].Length + 1) + y + 1;
                count++;
            }
        }
    }

    private void SetMeshColor()
    {
        colors = new Color[vertices.Length];

        for (int x = 0; x < mapInfo.Length; x++)
        {
            for (int y = 0; y < mapInfo[x].Length; y++)
            {
                switch (mapInfo[x][y])
                {
                    case '#':
                        break;
                    case '*':
                        break;
                    case '@':
                        break;
                    case 'S':
                        break;
                    case ' ':
                        break;
                    case 'M':
                        break;
                    default:
                        break;
                }
            }
        }

    }

    private void ApplyMesh()
    {
        mesh.Clear();
        mesh.vertices = vertices;
        mesh.triangles = triangles;
        mesh.colors = colors;
        mesh.RecalculateNormals();
    }

}
