using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class MapMatric
{
    public static char[][] mapInfo = new char[][]{  // # == wall, * == point , @== bigPoint, S = spawn, M = ghostBox, space == empty   // heigt == 34 width == 29
        new char[]{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','*','*','*','*','*','*','*','*','*','*','*','*','#','*','*','*','*','*','*','*','*','*','*','*','*','*','#' },
        new char[]{'#','@','#','#','#','*','#','#','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','@','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','*','*','*','*','*','*','*','*','*','*','*','*','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','*','*','*','*','#','#','#','#','*','*','*','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#','#','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#','#','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','#','#','#',' ',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','M','M','M','M','M','M','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','M','M','M','M','M','M','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{' ',' ',' ',' ',' ','*',' ',' ','#','M','M','M','M','M','M','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','M','M','M','M','M','M','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','*','#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','*','*','*','*','*','*','*','*','*','*','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','@','*','*','*','*','#','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','*','#','*','*','*','*','*','*','*','*','*','S','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','*','#','*','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','*','*','#','*','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','*','*','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','#','#','#','*','#','#','#','#','#','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','*','*','*','*','*','*','*','*','*','*','*','*','*','*','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
        new char[]{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
    };
    public static int width = 29;
    public static int height = 34;

    public static bool CheckWall(int x, int y)
    {
        if (y == 18 && x == -1)
        {
            return false;
        }
        if (y == 18 && x == 29)
        {
            return false;
        }
        if (mapInfo[height - y - 1][x] == '#')
        {
            return true;
        }
        return false;
    }
    public static void CloseDoor()
    {
        for (int i = 12; i < 17; i++)
        {
            mapInfo[12][i] = '#';
        }
    }
    public static void OpenDoor()
    {

    }

    public static List<Vector2> FindForkNearPosision(int x, int y)
    {
        List<Vector2> forks = new List<Vector2>();

        if (y == 18 && x < 5 && x >= -1)
        {
            forks.Add(new Vector2(5, 18));
            forks.Add(new Vector2(23, 18));
            return forks;
        }
        if (y == 18 && x > 23 && x <= 29)
        {
            forks.Add(new Vector2(5, 18));
            forks.Add(new Vector2(23, 18));
            return forks;
        }
        if (y == 18 && x == 23)
        {
            forks.Add(new Vector2(5, 18));
        }
        if (y == 18 && x == 5)
        {
            forks.Add(new Vector2(23, 18));
        }


        int xFake = 0;
        int yFake = 0;


        xFake = x;
        yFake = y;
        while (xFake < 28)
        {
            xFake++;
            if (xFake == 28 && yFake == 28)
            {
                break;
            }
            if (CheckWall(xFake, yFake))
            {
                break;
            }
            if (CheckFork(xFake, yFake))
            {
                forks.Add(new Vector2(xFake, yFake));
                break;
            }
        }

        xFake = x;
        yFake = y;

        while (xFake > 0)
        {

            xFake--;
            if (xFake == 0 && yFake == 18)
            {
                break;
            }
            if (CheckWall(xFake, yFake))
            {
                break;
            }
            if (CheckFork(xFake, yFake))
            {
                forks.Add(new Vector2(xFake, yFake));
                break;
            }
        }


        xFake = x;
        yFake = y;
        while (yFake >= 0)
        {
            yFake--;
            if (CheckWall(xFake, yFake))
            {
                break;
            }
            if (CheckFork(xFake, yFake))
            {
                forks.Add(new Vector2(xFake, yFake));
                break;
            }
        }


        xFake = x;
        yFake = y;
        while (yFake < 34)
        {
            yFake++;
            if (CheckWall(xFake, yFake))
            {
                break;
            }
            if (CheckFork(xFake, yFake))
            {
                forks.Add(new Vector2(xFake, yFake));
                break;
            }
        }

        return forks;
    }


    public static bool CheckFork(int x, int y)
    {
        int countWall = 0;
        if (mapInfo[height - y - 1][x + 1] == '#')
        {
            countWall++;
        }
        if (mapInfo[height - y - 1][x - 1] == '#')
        {
            countWall++;
        }
        if (mapInfo[height - y][x] == '#')
        {
            countWall++;
        }
        if (mapInfo[height - y - 2][x] == '#')
        {
            countWall++;
        }
        if (countWall >= 3)
        {
            return false;
        }
        else
        {
            if (countWall == 2)
            {
                if (mapInfo[height - y][x] == '#' && mapInfo[height - y - 2][x] == '#')
                {
                    return false;
                }
                if (mapInfo[height - y - 1][x + 1] == '#' && mapInfo[height - y - 1][x - 1] == '#')
                {
                    return false;
                }
            }

        }
        return true;
    }

    public static Vector2 FindBigPoint()
    {
        Vector2 a1 = new Vector2();
        Vector2 a2 = new Vector2();

        Vector2 a3 = new Vector2();

        Vector2 a4 = new Vector2();

        if (mapInfo[2][1] == '@')
        {
            a1.x = 1;
            a1.y = height - 2 - 1;
        }
        if (mapInfo[26][1] == '@')
        {
            a2.x = 1;
            a2.y = height - 26 - 1;
        }
        if (mapInfo[2][27] == '@')
        {
            a3.x = 27;
            a3.y = height - 2 - 1;
        }
        if (mapInfo[26][27] == '@')
        {
            a4.x = 27;
            a4.y = height - 26 - 1;
        }

        var i = Random.Range(1, 8);
        if (i == 1)
        {
            if (a1 != Vector2.zero)
            {
                return a1;

            }
        }
        if (i == 2)
        {
            if (a2 != Vector2.zero)
            {
                return a2;

            }
        }
        if (i == 3)
        {
            if (a3 != Vector2.zero)
            {
                return a3;

            }
        }
        if (i == 4)
        {
            if (a4 != Vector2.zero)
            {
                return a4;
            }
        }

        Vector2 asafs = new Vector2();
        asafs.x = (int)Random.Range(1, 28);
        asafs.y = (int)Random.Range(1, 33);



        return asafs;
    }


}
